name: Build app
run-name: Build app
on: 
  pull_request:
    paths:
      - 'back/**'
jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:18

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: dev
          POSTGRES_USER: dev
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install Dependencies
        working-directory: ./back
        run: |
              npm ci
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ./back/node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
  lint:
    name: lint
    needs: build
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:18
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ./back/node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        working-directory: ./back
        run: |
              npm run lint
  test:
    name: test
    needs: build
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:18

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: dev
          POSTGRES_USER: dev
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ./back/node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Migrate
        working-directory: ./back
        run: |
              npm run migrate:test
      - name: Test
        working-directory: ./back
        run: |
              npm run test
  test_e2e:
    name: test_e2e
    needs: build
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:18

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: dev
          POSTGRES_USER: dev
          POSTGRES_DB: test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: ./back/node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
      - name: Migrate
        working-directory: ./back
        run: |
              npm run migrate:test
      - name: Test e2e
        working-directory: ./back
        run: |
              npm run test:e2e
      
      
